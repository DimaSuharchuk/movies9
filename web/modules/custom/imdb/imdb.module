<?php

/**
 * @file
 * Module's main file. Provides work with different IMDB APIs.
 */

/**
 * Implements hook_toolbar_alter().
 *
 * @param $items
 *   Associative array of toolbar menu definitions returned from hook_toolbar().
 */
function imdb_toolbar_alter(&$items) {
  $items['administration']['#attached']['library'][] = 'imdb/imdb.menu';
}

/**
 * Batch process callback.
 * Import IMDb ratings into DB.
 *
 * @param $imdb_ids
 *   IMDb IDs of existing nodes.
 * @param $context
 *   Batch context.
 *
 * @return void
 * @group imdb_rating
 */
function imdb_rating_insert_batch($imdb_ids, &$context) {
  $manager_file = Drupal::service('imdb.rating.manager.file');
  $manager_db = Drupal::service('imdb.rating.manager.db');

  $ratings = $manager_file->getMultiple($imdb_ids);

  foreach ($ratings as $imdb_id => $rating) {
    $manager_db->set($imdb_id, $rating);
  }
}

/**
 * Batch finish callback.
 * Import IMDb ratings into DB.
 *
 * @param $success
 *   TRUE if batch finished successfully, FALSE - otherwise.
 * @param $results
 *   Batch results.
 * @param $operations
 *   Batch operations.
 *
 * @return void
 * @group imdb_rating
 */
function imdb_rating_insert_batch_finished($success, $results, $operations) {
  if ($success) {
    Drupal::state()
      ->set('imdb.rating.last_update', Drupal::time()->getRequestTime());
  }
}

/**
 * Check is the string a correct IMDb ID.
 *
 * @param string $id
 *   String for check.
 *
 * @return bool
 *   String is IMDb ID.
 */
function is_imdb_id(string $id): bool {
  return (bool) preg_match('/^tt\d{7,8}$/', $id);
}
