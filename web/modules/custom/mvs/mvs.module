<?php

/**
 * @file
 * Module's main file.
 */

use Drupal\mvs\Constant;
use Drupal\mvs\enum\NodeBundle;
use Drupal\tmdb\enum\TmdbImageFormat;

/**
 * Implements hook_theme().
 */
function mvs_theme($existing, $type, $theme, $path): array {
  return [
    'movies_language_switcher' => [
      'variables' => [
        'active_label' => NULL,
        'links' => [],
      ],
    ],
    'mvs_error_page' => [
      'variables' => [
        'error_code' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function mvs_page_attachments(array &$attachments): void {
  if (Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
    /** @var \Drupal\node\Entity\Node $node */
    $node = Drupal::routeMatch()->getParameter('node');
    $adapter = Drupal::service('tmdb.adapter');
    $date_helper = Drupal::service('date_helper');
    $language_manager = Drupal::languageManager();
    $current = $language_manager->getCurrentLanguage()->getId();
    $languages = $language_manager->getLanguages();
    $title = '';
    $current_lang_node_title = $node->getTitle();
    $dates = $years = [];

    switch ($node->bundle()) {
      case NodeBundle::movie():
        if ($date = $adapter->getCommonFieldValue($node, 'release_date')) {
          $dates[] = $date;
        }
        break;

      case NodeBundle::tv():
        if ($start_date = $adapter->getCommonFieldValue($node, 'first_air_date')) {
          $dates[] = $start_date;

          $end_date = '';
          if ($adapter->getCommonFieldValue($node, 'in_production') === FALSE) {
            $end_date = $adapter->getCommonFieldValue($node, 'last_air_date');
          }
          $dates[] = $end_date;
        }
        break;
    }

    foreach ($dates as $date) {
      $years[] = $date ? $date_helper->dateStringToYear($date) : '';
    }

    $year = implode('â€“', $years);

    switch ($current) {
      case 'en':
        $title = $year ? sprintf('%s (%s)', $current_lang_node_title, $year) : sprintf('%s', $current_lang_node_title);
        break;

      case 'uk':
        $en_title = $node->getTranslation('en')->getTitle();
        $title = $year ? sprintf('%s (%s, %s)', $current_lang_node_title, $year, $en_title) : sprintf('%s (%s)', $current_lang_node_title, $en_title);
        break;
    }

    $attachments['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => [
          'property' => 'og:title',
          'content' => $title,
        ],
      ],
      'og-title',
    ];
    $attachments['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => [
          'property' => 'og:type',
          'content' => $node->bundle() == NodeBundle::movie() ? 'video.movie' : 'video.tv_show',
        ],
      ],
      'og-type',
    ];
    $attachments['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => [
          'property' => 'og:image',
          'content' => Constant::TMDB_IMAGE_BASE_URL . TmdbImageFormat::original()
              ->key() . $node->{'field_poster'}->value,
        ],
      ],
      'og-image',
    ];
    $attachments['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => [
          'property' => 'og:url',
          'content' => $node->toUrl('canonical', ['absolute' => TRUE])
            ->toString(),
        ],
      ],
      'og-url',
    ];
    $attachments['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => [
          'property' => 'og:description',
          'content' => $adapter->getCommonFieldValue($node, 'overview') ?? '',
        ],
      ],
      'og-description',
    ];

    $attachments['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => [
          'property' => 'og:locale',
          'content' => _get_locale_code_ISO8859_1($current),
        ],
      ],
      'og-locale',
    ];

    foreach ($languages as $language) {
      $language = $language->getId();

      if ($language != $current) {
        $attachments['#attached']['html_head'][] = [
          [
            '#type' => 'html_tag',
            '#tag' => 'meta',
            '#attributes' => [
              'property' => 'og:locale:alternate',
              'content' => _get_locale_code_ISO8859_1($language),
            ],
          ],
          "og-locale-alternate-$language",
        ];
      }
    }
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * @deprecated
 *   Remove after views will be removed.
 */
function mvs_element_info_alter(array &$info) {
  $info['view']['#pre_render'][] = [
    Drupal\mvs\Element\View::class,
    'preRenderViewElement',
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * @deprecated
 *   Remove after views will be removed.
 */
function mvs_form_views_exposed_form_alter(&$form) {
  $bundle = NULL;
  $remove_animation_filter = TRUE;

  switch ($form['#id']) {
    case 'views-exposed-form-movies-home':
      $bundle = ['movie', 'tv'];
      $remove_animation_filter = FALSE;
      break;

    case 'views-exposed-form-movies-movie':
      $bundle = 'movie';
      break;

    case 'views-exposed-form-movies-tv':
      $bundle = 'tv';
      break;

    case 'views-exposed-form-movies-animation':
      $bundle = ['movie', 'tv'];
      break;

  }

  if ($bundle) {
    // Get genres for current bundle.
    $genres_by_bundle = Drupal::service('entity_finder')
      ->findTermsGenres()
      ->addCondition('field_used_in', $bundle)
      ->execute();

    // Get genres (options) from form.
    $genres = &$form['field_genres_target_id']['#options'];
    // Filter only genres used in current bundle.
    $genres = array_intersect_key($genres, $genres_by_bundle);
    // Sort by name ASC.
    asort($genres);

    // Remove "Animation" filter from some view.
    if ($remove_animation_filter && $tid = _get_animation_term_id()) {
      unset($genres[$tid]);
    }
  }
}

/**
 * Helper function returns ID of term "Animation".
 *
 * @return int|null
 */
function _get_animation_term_id(): ?int {
  return Drupal::service('entity_finder')
    ->findTermsGenres()
    ->addCondition('name', 'Animation')
    ->reduce()
    ->execute();
}

/**
 * Helper function converts locale code from ISO 639-1 to ISO 8859-1.
 *
 * @param string $langcode
 *   Langcode in ISO 639-1 format e.g. "en", "uk".
 *
 * @return string
 *   Langcode in ISO 8859-1 format e.g. "en_US", "uk_UA".
 */
function _get_locale_code_ISO8859_1(string $langcode): string {
  return match ($langcode) {
    'en' => 'en_US',
    'uk' => 'uk_UA',
  };
}
