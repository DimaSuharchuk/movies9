<?php

/**
 * @file
 * Site updates.
 */

use Drupal\imdb\Repository\ImdbRatingRepository;
use Drupal\mvs\Constant;

/**
 * Implements hook_schema().
 */
function imdb_schema(): array {
  $schema = [];

  $schema[ImdbRatingRepository::IMDB_RATING_TABLE] = [
    'description' => 'Contains movies rating from IMDB.',
    'fields' => [
      'imdb_id' => [
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => 0,
        'description' => "Movie's IMDB ID.",
      ],
      'rating' => [
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 3,
        'scale' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => "Movie's IMDB rating.",
      ],
    ],
    'primary key' => ['imdb_id'],
    'indexes' => [
      'rating' => ['rating'],
    ],
  ];

  return $schema;
}

/**
 * Delete terms: "News", "Reality", "Talk" and nodes using the terms.
 */
function imdb_update_9101() {
  // Get nodes IDs using excluded terms.
  $q = Drupal::database()->select('taxonomy_index', 'i');
  $q->innerJoin('taxonomy_term__field_tmdb_id', 'tid', 'tid.entity_id=i.tid');
  $q->condition('tid.field_tmdb_id_value', Constant::EXCLUDED_GENRES_TMDB_IDS, 'IN');
  $q->condition('tid.bundle', 'genre');
  $q->fields('i', ['nid']);
  $q->orderBy('i.nid');
  $q->distinct();
  if ($node_ids = $q->execute()->fetchCol()) {
    // Delete nodes.
    $ns = Drupal::entityTypeManager()->getStorage('node');
    $nodes = $ns->loadMultiple($node_ids);
    $ns->delete($nodes);
  }

  if ($terms = Drupal::service('entity_finder')
    ->findTermsGenres()
    ->byTmdbIds(Constant::EXCLUDED_GENRES_TMDB_IDS)
    ->loadEntities()
    ->execute()) {
    // Delete terms.
    $ts = Drupal::entityTypeManager()->getStorage('taxonomy_term');
    $ts->delete($terms);
  }
}

/**
 * Install module "mvs".
 */
function imdb_update_9301() {
  Drupal::service('module_installer')->install(['mvs']);
}

/**
 * Add table for IMDB rating.
 */
function imdb_update_9401() {
  $table = ImdbRatingRepository::IMDB_RATING_TABLE;
  $spec = imdb_schema()[$table];
  $schema = Drupal::database()->schema();

  if (!$schema->tableExists($table)) {
    $schema->createTable($table, $spec);
  }
}

/**
 * Add ratings for existing nodes.
 */
function imdb_update_9402() {
  $manager_file = Drupal::service('imdb.rating.manager.file');
  $manager_db = Drupal::service('imdb.rating.manager.db');

  $manager_db->clear();
  $manager_file->refresh();

  $imdb_ids = Drupal::database()
    ->select('node__field_imdb_id', 'n')
    ->fields('n', ['field_imdb_id_value'])
    ->execute()
    ->fetchCol();

  $ratings = $manager_file->getMultiple($imdb_ids);

  foreach ($ratings as $imdb_id => $rating) {
    $manager_db->set($imdb_id, $rating);
  }

  Drupal::state()
    ->set('imdb.rating.last_update', Drupal::time()->getRequestTime());
}
