<?php

/**
 * @file
 * Module's main file.
 */

use Drupal\Core\Entity\EntityMalformedException;
use Drupal\Core\Url;
use Drupal\mvs\Constant;
use Drupal\mvs\enum\Language;
use Drupal\mvs\enum\NodeBundle;
use Drupal\tmdb\enum\TmdbImageFormat;

/**
 * Implements hook_theme().
 */
function mvs_theme($existing, $type, $theme, $path): array {
  return [
    'movies_language_switcher' => [
      'variables' => [
        'active_label' => NULL,
        'links' => [],
      ],
    ],
    'mvs_error_page' => [
      'variables' => [
        'error_code' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function mvs_page_attachments(array &$attachments): void {
  $route = Drupal::routeMatch()->getRouteName();
  $language_manager = Drupal::languageManager();
  $current = $language_manager->getCurrentLanguage()->getId();

  switch ($route) {
    case 'entity.node.canonical':
      /** @var \Drupal\node\Entity\Node $node */
      $node = Drupal::routeMatch()->getParameter('node');
      $adapter = Drupal::service('tmdb.adapter');
      $date_helper = Drupal::service('date_helper');
      $title = '';
      $current_lang_node_title = $node->getTitle();
      $dates = $years = [];

      switch (NodeBundle::from($node->bundle())) {
        case NodeBundle::movie:
          if ($date = $adapter->getCommonFieldValue($node, 'release_date')) {
            $dates[] = $date;
          }
          break;

        case NodeBundle::tv:
          if ($start_date = $adapter->getCommonFieldValue($node, 'first_air_date')) {
            $dates[] = $start_date;

            $end_date = '';
            if ($adapter->getCommonFieldValue($node, 'in_production') === FALSE) {
              $end_date = $adapter->getCommonFieldValue($node, 'last_air_date');
            }
            $dates[] = $end_date;
          }
          break;
      }

      foreach ($dates as $date) {
        $years[] = $date ? $date_helper->dateStringToYear($date) : '';
      }

      $year = implode('â€“', $years);

      switch (Language::from($current)) {
        case Language::en:
          $title = $year ? sprintf('%s (%s)', $current_lang_node_title, $year) : sprintf('%s', $current_lang_node_title);
          break;

        case Language::uk:
          $en_title = $node->getTranslation(Language::en->name)->getTitle();
          $title = $year ? sprintf('%s (%s, %s)', $current_lang_node_title, $year, $en_title) : sprintf('%s (%s)', $current_lang_node_title, $en_title);
          break;
      }

      mvs_attach_meta_tag($attachments, 'title', $title);
      mvs_attach_meta_tag($attachments, 'type', NodeBundle::from($node->bundle()) == NodeBundle::movie ? 'video.movie' : 'video.tv_show');
      mvs_attach_meta_tag($attachments, 'image', Constant::TMDB_IMAGE_BASE_URL . TmdbImageFormat::w780->name . $node->{'field_poster'}->value);

      try {
        $node_url = $node->toUrl('canonical', ['absolute' => TRUE])->toString();
        mvs_attach_meta_tag($attachments, 'url', $node_url);
      }
      catch (EntityMalformedException) {
      }

      mvs_attach_meta_tag($attachments, 'description', $adapter->getCommonFieldValue($node, 'overview') ?? '');
      break;

    default:
      if (str_starts_with($route, 'entity.')) {
        break;
      }

      // Site name.
      mvs_attach_meta_tag($attachments, 'site_name', 'Movies');
      // Image.
      $theme_path = Drupal::theme()->getActiveTheme()->getPath();
      $image_path = "base:/$theme_path/logo-big.png";
      $absolute_url = Url::fromUri($image_path, ['absolute' => TRUE]);
      mvs_attach_meta_tag($attachments, 'image', $absolute_url->toString());
      // Title.
      mvs_attach_meta_tag($attachments, 'title', t('Find the best movies'));
      // Description.
      mvs_attach_meta_tag($attachments, 'description', t('Information about each movie - looking for a description, actors or genre? We have it all!'));
      // Type.
      mvs_attach_meta_tag($attachments, 'type', 'website');
      // Url.
      try {
        $url = Url::fromRoute($route, [], ['absolute' => TRUE])->toString();
        mvs_attach_meta_tag($attachments, 'url', $url);
      }
      catch (Exception) {
      }
      break;
  }

  // For any route.
  mvs_attach_meta_tag($attachments, 'locale', _get_locale_code_ISO8859_1($current));

  foreach ($language_manager->getLanguages() as $language) {
    $language = $language->getId();

    if ($language != $current) {
      $attachments['#attached']['html_head'][] = [
        [
          '#type' => 'html_tag',
          '#tag' => 'meta',
          '#attributes' => [
            'property' => 'og:locale:alternate',
            'content' => _get_locale_code_ISO8859_1($language),
          ],
        ],
        "og-locale-alternate-$language",
      ];
    }
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * @deprecated
 *   Remove after views will be removed.
 */
function mvs_element_info_alter(array &$info) {
  $info['view']['#pre_render'][] = [
    Drupal\mvs\Element\View::class,
    'preRenderViewElement',
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * @deprecated
 *   Remove after views will be removed.
 */
function mvs_form_views_exposed_form_alter(&$form) {
  $bundle = NULL;
  $remove_animation_filter = TRUE;

  switch ($form['#id']) {
    case 'views-exposed-form-movies-home':
      $bundle = ['movie', 'tv'];
      $remove_animation_filter = FALSE;
      break;

    case 'views-exposed-form-movies-movie':
      $bundle = 'movie';
      break;

    case 'views-exposed-form-movies-tv':
      $bundle = 'tv';
      break;

    case 'views-exposed-form-movies-animation':
      $bundle = ['movie', 'tv'];
      break;

  }

  if ($bundle) {
    // Get genres for current bundle.
    $genres_by_bundle = Drupal::service('entity_finder')
      ->findTermsGenres()
      ->addCondition('field_used_in', $bundle)
      ->execute();

    // Get genres (options) from form.
    $genres = &$form['field_genres_target_id']['#options'];
    // Filter only genres used in the current bundle.
    $genres = array_intersect_key($genres, $genres_by_bundle);
    // Sort by name ASC.
    asort($genres);

    // Remove "Animation" filter from some view.
    if ($remove_animation_filter && $tid = _get_animation_term_id()) {
      unset($genres[$tid]);
    }
  }
}

/**
 * Helper function returns ID of term "Animation".
 *
 * @return int|null
 */
function _get_animation_term_id(): ?int {
  return Drupal::service('entity_finder')
    ->findTermsGenres()
    ->addCondition('name', 'Animation')
    ->reduce()
    ->execute();
}

/**
 * Helper function converts locale code from ISO 639-1 to ISO 8859-1.
 *
 * @param string $langcode
 *   Langcode in ISO 639-1 format e.g. "en", "uk".
 *
 * @return string
 *   Langcode in ISO 8859-1 format e.g. "en_US", "uk_UA".
 */
function _get_locale_code_ISO8859_1(string $langcode): string {
  return match ($langcode) {
    Language::en->name => 'en_US',
    Language::uk->name => 'uk_UA',
  };
}

/**
 * Attaches an Open Graph meta-tag to the HTML head attachments array.
 *
 * @param array $attachments
 *   A renderable array with a '#attached' property to modify by reference.
 * @param string $name
 *   The Open Graph meta-tag name (e.g., 'title', 'description').
 * @param string $content
 *   The content value for the meta-tag.
 *
 * @return void
 */
function mvs_attach_meta_tag(array &$attachments, string $name, string $content): void {
  $attachments['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => [
        'property' => "og:$name",
        'content' => $content,
      ],
    ],
    "og-$name",
  ];
}
